name: Pylint


on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11" ]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    - name: Analysing the code with pylint
      id: pylint
      continue-on-error: true
      run: |
        pylint $(git ls-files '*.py')
    - name: checking
      if: ${{ steps.pylint.outcome != 'success' }}
      run: echo "hola"
      #uses: dudisamarel/reset-head@v1
      #with:
    # The name of the branch to reset.
    #    branch-name: main
   # -# #name: Making unitesting
      #uses: xoviat/actions-pytest@0.1-alpha2

  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11" ]
    steps:
    - name: Check Commit Type
      id: checkft
      uses: gsactions/commit-message-checker@v2
      with:
        pattern: '^feat'
        flags: 'gm'
        error: "No feat commit msg found"
    - name: Check status
      if: ${{ steps.checkft.outcome == 'success' }}
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Exec integration testing
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        cd simple_app/
        poetry install
        poetry run pytest -m integration
# Notese que hay una previa configuracion de herramientas de prueba y yo las ejecuto desde el entorno declarado previamente
# Buscar una mejor manera de hacer la logica que defina si ejecutar o no el pipe de integracion
