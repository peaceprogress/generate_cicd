# Notese que hay una previa configuracion de herramientas de prueba y yo las ejecuto desde el entorno declarado previamente
# Buscar una mejor manera de hacer la logica que defina si ejecutar o no el pipe de integracion
# La version de las librerias compatibles con el proyecto deberia declararse centralizadamente, leerse desde un fichero de config del proyecto y no escribirse en el pipe
# TODO: Leer configuracion de dependencias para CI desde pyproject.toml
# DONE: Usar el entorno (poetry) para ejecutar las prueba
# DONE: Ejecutar de manera lineal (no paralela) el work tanto de commit como de aceptacion
# DONE: GH debe REVERTIR el estado del proyecto al ultimo commit si el entrante falla
#
name: Pylint


on: [push]

permissions:
  contents: write
  pull-requests: write 
  issues: read
  packages: none
  actions: write
  

# Para usar los valores de calidad de codigo usar contexto: env
# Setear env var 'expected quality value' y hacer una evaluacion en bash de eso

jobs:
  commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11 
    - name: Installing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        cd simple_app/
        poetry install --with commit
    - name: Analysing the code with pylint
      id: pylint
      if: success() || failure()
      run: |
        cd simple_app/
        poetry run pylint $(git ls-files '*.py') | grep  "Your code has been rated at 9*"
    - name: Running unitesting
      if: success() || failure()
      id: unittesting
      run: |
        cd simple_app/
        poetry install --with commit
        poetry run pytest
    - name: Checking Job Status
      if: ${{ steps.*.outcome != 'success'}}
      run: echo "Hubo al menos un error, por lo que se revertira el commit"
      
  auto-revert-commit:
    needs: commit
    runs-on: ubuntu-latest
    if: always() && (needs.commit.result == 'failure')
    steps:
      - name: Automatic Commit Revert
        uses: 'tofu-apis/revert-commit-action@v0.0.37'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          is-push-enabled: 'true'

  acceptance:
    needs: commit
    runs-on: ubuntu-latest
    if: always() && (needs.commit.result == 'failure')
    steps:
    - name: Check Commit Type
      id: checkft
      uses: gsactions/commit-message-checker@v2
      with:
        pattern: 'feat'
        flags: 'gm'
        error: "No feat commit msg found"
    - name: Check status
      if: ${{ steps.checkft.outcome == 'success' }}
      uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    - name: Exec integration testing
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        cd simple_app/
        poetry install --with integration
        poetry run pytest -m integration
    - name: Exec bdd testing
      run: |
        cd simple_app/
        poetry run behave
