from generate_cicd.ci_file_generator.generator import PipeGenerator

"""File generator for CI pipeline specs on different CI server system vendors"""

#def test_sut_should_allow_set_a_ci_vendor():
#    """Generator should both set and comunicate what ci vendor will be used"""
#    sut = PipeGenerator()
#    sut.set_ci_vendor(ci_vendor="gha")
#    assert sut.using_vendor()=="github actions"

class Specs:
    """CI pipeline specs dto for PipeGenerator"""
    def __init__(self,vendor:str=None,
                 vcs_vendor:str=None,
                 stages:dict=None,
                 platform:dict=None):
        self._vendor = vendor
        self._vcs_vendor =  vcs_vendor
        self._stages = stages
        self._platform = platform

    def get_vendor(self):
        return self._vendor

    def get_vcs_vendor(self):
        return self._vcs_vendor

    def get_stages(self):
        return self._stages

    def get_platform(self):
        return self._platform

#TODO: improve test for make it easer to read
def test_sut_should_read_pipeline_spec():
    """
    Sut should read specs generated by pipe generator
    """
    stages={"commit":["lintering","unitesting","checkhealth"],
            "acceptance":["integration"]}
    specs  = Specs(vendor="github actions",
                   vcs_vendor="git",
                   stages=stages,
                   platform="python3")
    sut = PipeGenerator(pipe_specs=specs)
    assert sut.using_vendor()=="github actions"
    assert sut.using_vcs_vendor()=="git"
    assert "lintering" in sut.adding_stages()["commit"]
    assert "integration" in sut.adding_stages()["acceptance"]
    assert sut.using_platform()=="python3"

#def test_sut_should_allow_set_ci_stages_to_generate():
#    """
#    Generator should allow generate only as wanted ci stages as dev needs
#    Basic CICD pipeline should contain:
#        1. Commit Stage
#        2. Acceptance Stage
#        3. Pre Deploy Stage
#    """
#   pass


